
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;


public class Dijkstar1 extends javax.swing.JFrame {

    int n=-1;
    int m=0;
    public Dijkstar1() {
        initComponents();
        setSize(900,700);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        previous = new javax.swing.JButton();
        next = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        previous.setBackground(java.awt.Color.red);
        previous.setFont(new java.awt.Font("Cambria", 3, 18)); // NOI18N
        previous.setText("Previous");
        previous.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                previousMousePressed(evt);
            }
        });

        next.setBackground(java.awt.Color.green);
        next.setFont(new java.awt.Font("Cambria", 3, 18)); // NOI18N
        next.setText("Next");
        next.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                nextMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(201, 201, 201)
                .addComponent(previous, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(187, 187, 187)
                .addComponent(next, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(285, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(332, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(previous, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(next, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(97, 97, 97))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nextMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextMousePressed
n++;
repaint();
    }//GEN-LAST:event_nextMousePressed

    private void previousMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_previousMousePressed
n--;
m=1;
repaint();
    }//GEN-LAST:event_previousMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dijkstar1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dijkstar1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dijkstar1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dijkstar1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dijkstar1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton next;
    private javax.swing.JButton previous;
    // End of variables declaration//GEN-END:variables
public void paint(Graphics g)
    {
        
        if(m==1)
        {   
            g.setColor(Color.white);
            g.fillRect(0, 70, 1000, 1000);
            m=0;
        }
        
        if(n>=0){
            g.setColor(Color.white);
            g.fillRect(0, 75, 1000, 450);
            Font f=new Font("TimesNewRoman",Font.BOLD,30);
        g.setFont(f);
        g.setColor(Color.black);
          g.drawString("DIJKSTRA ALGORITHM", 275,70);
        f=new Font("TimesNewRoman",Font.BOLD,20);
        g.setFont(f);
         Graphics2D g2 = (Graphics2D) g;
         g2.setStroke(new BasicStroke(3));
        g.setColor(Color.red);
       g.fillOval(150,200,40,40);//A
       g.fillOval(300,350,40,40);//B
       g.fillOval(400,100,40,40);//c
       g.fillOval(550,350,40,40);//D
       g.fillOval(650,175,40,40);//E
        g.setColor(Color.black);
        
        
       
                
        g.drawString("A", 163,225);
        g.drawString("B", 312,375);
        g.drawString("C", 412,125);
        g.drawString("D", 563,377);
        g.drawString("E", 663,200);
       
        
      
       g.drawLine(183,233,307,357);//AB
       g.drawLine(188,210,400,120);//AC
       g.drawLine(190,220,650,190);//AE
       g.drawLine(320,350,415,137);//BC
       g.drawLine(340,370,551,370);//BD
       g.drawLine(570,350,660,210);//DE
       g.drawLine(334,358,652,203);//BE
       g.drawLine(440,120,655,180);//CE
       
       g.drawString("10",245,295);//AB weight
       g.drawString("5", 294,160);//AC weight
       g.drawString("30", 420,200);//AE weight
       g.drawString("2", 360,280);//BC weight
       g.drawString("6", 445,365);//BD weight
       g.drawString("7", 630,280);//DE weight
       g.drawString("34", 480,280);//BE weight
       g.drawString("22", 552,150);//CE weight
       g.setColor(Color.yellow);
                g.fillOval(150,200,40,40);//A
                g.setColor(Color.black);
                g.drawString("A", 163,225);
                g.setColor(Color.green);
    
        g.setColor(Color.blue);
                g.fillOval(650,175,40,40);//E
                g.setColor(Color.black);
                g.drawString("E", 663,200);
                
        
         if (n>=1)
        {   
            g.setColor(Color.orange);
            g.drawString("5",415, 95);//over C   
            g.drawString("10",310,420);//below B
            g.drawString("âˆž",560, 415);//below D   
            g.drawString("30",680, 175);//below E   
            g.setColor(Color.gray);
            g.drawString("CALCULATES DISTANCE TO ALL NODES ",250,500);   
            g.setColor(Color.red);
            g.drawLine(188, 210, 400, 120);
            g.drawLine(183, 233, 307, 357);
            g.drawLine(190, 220, 650, 190);
       
        if (n>=2)
        {
                 g.setColor(Color.green);
                g.drawLine(188,210,400,120);//AC
                 g.setColor(Color.green);
               g.fillOval(400,100,40,40);//C
                 g.setColor(Color.black);
               g.drawString("C", 412,125);
               g.setColor(Color.white);
                g.drawString("CALCULATES DISTANCE TO ALL NODES ",250,500); 
                g.setColor(Color.gray);
            g.drawString("SELECTS NODE WITH MINIMUM COST ",250,500); 
                g.setColor(Color.black);
                g.drawLine(183, 233, 307, 357);
            g.drawLine(190, 220, 650, 190);
        }
        
         if (n>=3)
        {
            g.setColor(Color.white);
            g.drawString("10",310,420);//below B
            g.drawString("30",680, 175);//below E
                 g.setColor(Color.orange);
             g.drawString("5+2<10 ? (True)",310,420);//below B 
            g.drawString("22+5<30 ? (True)",680, 175);//below E
            g.setColor(Color.white);
            g.drawString("SELECTS NODE WITH MINIMUM COST ",250,500); 
            g.setColor(Color.gray);
            g.drawString("COMPARES THE COST FROM NEW NODE",250,500); 
            g.setColor(Color.red);
            g.drawLine(320,350,415,137);
            g.drawLine(440, 120, 655, 180);
         if (n>=4)
        {
                 g.setColor(Color.white);
             g.drawString("5+2<10 ? (True)",310,420);//below B 
            g.drawString("22+5<30 ? (True)",680, 175);//below E
            g.setColor(Color.orange);
             g.drawString("7",310,420);//below B 
            g.drawString("27",680, 175);//below E
            g.setColor(Color.white);
            g.drawString("COMPARES THE COST FROM NEW NODE",250,500); 
             g.setColor(Color.gray);
            g.drawString("UPDATES THE NEW COSTS FOR NODES",250,500);    
            g.setColor(Color.red);
            g.drawLine(320,350,415,137);
            g.drawLine(440, 120, 655, 180);
         if (n>=5)
                {
                g.setColor(Color.white);
                g.drawString("UPDATES THE NEW COSTS FOR NODES",250,500);
                g.setColor(Color.gray);
                g.drawString("SELECTS NODE WITH MINIMUM COST ",250,500);
               g.setColor(Color.green);
               g.drawLine(320,350,415,137);//BC
                g.fillOval(300,350,40,40);//B
                 g.setColor(Color.black);
                g.drawString("B", 312,375);
                g.setColor(Color.black);
                g.drawLine(440, 120, 655, 180);
                
          if (n>=6)
                {g.setColor(Color.white);
                    g.drawString("SELECTS NODE WITH MINIMUM COST ",250,500); 
            g.setColor(Color.gray);
            g.drawString("COMPARES THE COST FROM NEW NODE",250,500); 
                   g.setColor(Color.white);
            g.drawString("âˆž",560, 415);//below D 
            g.drawString("27",680, 175);//below E
             g.setColor(Color.orange);
             g.drawString("5+2+6<âˆž ? (True)",560, 415);//below D 
            g.drawString("5+2+34<27 ? (False)",680, 175);//below E
            g.setColor(Color.red);
            g.drawLine(340, 370, 551, 370);
            g.drawLine(334, 358, 652, 203);
                       
          if (n>=7)
                {
                g.setColor(Color.white);
                 g.drawString("5+2+6<âˆž ? (True)",560, 415);//below D 
                 g.drawString("5+2+34<27 ? (False)",680, 175);//below E
                g.setColor(Color.orange);
                 g.drawString("13",560, 415);//below D 
                 g.drawString("27",680, 175);//below E
                 g.setColor(Color.white);
                 g.drawString("COMPARES THE COST FROM NEW NODE",250,500); 
             g.setColor(Color.gray);
            g.drawString("UPDATES THE NEW COSTS FOR NODES",250,500);  
        
          if (n>=8)
                {
                 g.setColor(Color.green);
                 g.fillOval(550,350,40,40);//D
                 g.drawLine(340,370,551,370);//BD
                 g.setColor(Color.black);
                 g.drawString("D", 563,377);
                 g.setColor(Color.white);
                g.drawString("UPDATES THE NEW COSTS FOR NODES",250,500);
                g.setColor(Color.gray);
                g.drawString("SELECTS NODE WITH MINIMUM COST ",250,500);
                 g.setColor(Color.black);
                 g.drawLine(334,358,652,203);
                     
        if (n>=9)
                {g.setColor(Color.white);
                  g.drawString("27",680, 175);//below E
                  g.setColor(Color.orange);
                  g.drawString("5+2+6+7<27 ? (True)",680, 175);//below E
                  g.setColor(Color.white);
                  g.drawString("SELECTS NODE WITH MINIMUM COST ",250,500); 
                    g.setColor(Color.gray);
                    g.drawString("COMPARES THE COST FROM NEW NODE",250,500);    
                    g.setColor(Color.red);
                    g.drawLine(570,350,660,210);
                    
                    
         if (n>=10)
        {
                 g.setColor(Color.white);
                  g.drawString("5+2+6+7<27 ? (True)",680, 175);//below E
                g.setColor(Color.orange);
                  g.drawString("20",680, 175);//below E
                  g.setColor(Color.green);
                g.drawLine(570,350,660,210);//DE
                g.setColor(Color.white);
                  g.drawString("COMPARES THE COST FROM NEW NODE ",250,500); 
                    g.setColor(Color.gray);
                    g.drawString("SELECTS NODE WITH MINIMUM COST",250,500);
        
        
         if (n>=11)
        {g.setColor(Color.white);
                    g.drawString("SELECTS NODE WITH MINIMUM COST",250,500);
                    g.setColor(Color.gray);
                    g.drawString("SHORTEST PATH FROM A--->E HAS BEEN FOUND",240,500);
            g.setColor(Color.white);
            g.drawLine(190,220,650,190);//AE
            g.drawLine(183,233,307,357);//AB
            g.drawLine(334,358,652,203);//BE
            g.drawLine(440,120,655,180);//CE
            g.drawString("30", 420,200);//AE weight
             g.drawString("10",245,295);//AB weight
            g.drawString("34", 480,280);//BE weight
            g.drawString("32", 552,150);//CE weight
            g.setColor(Color.green);
               g.drawLine(320,350,415,137);//BC
                g.fillOval(300,350,40,40);//B
                 g.setColor(Color.black);
                g.drawString("B", 312,375);
        if (n>=12)
        {
            
           if (n>=13)
        {
            
        if (n>=14)
        {
            
        
     if (n>=15)
        {
            
       
    
    
        }}}}}}}}}}}}}}}
      
    
        }
    




}
