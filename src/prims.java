
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.logging.Level;
import java.util.logging.Logger;

public class prims extends javax.swing.JFrame implements Runnable {
     int n=-1;
     int m=2000;
     int k=0;
    
    Thread t;
    /**
     * Creates new form prims
     */
   public void run()
    {
         try {
             t.suspend();
            while(n!=31)
            { repaint();
              t.sleep(m);
              n++;
            }
     
         
        } catch (InterruptedException ex) {
           Logger.getLogger(prims.class.getName()).log(Level.SEVERE, null, ex);
       }
        
        
    }
    public prims() {
       
        initComponents();
        t=new Thread(this);
       t.start();
      setSize(800,700);
             
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        up = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(900, 400));

        jButton1.setBackground(new java.awt.Color(0, 153, 255));
        jButton1.setFont(new java.awt.Font("Cambria", 3, 18)); // NOI18N
        jButton1.setText("Pause");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton1MousePressed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(204, 0, 204));
        jButton2.setFont(new java.awt.Font("Cambria", 3, 18)); // NOI18N
        jButton2.setText("Resume");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton2MousePressed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(255, 102, 0));
        jButton3.setFont(new java.awt.Font("Cambria", 3, 18)); // NOI18N
        jButton3.setText("Speed UP");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton3MousePressed(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(153, 153, 0));
        jButton4.setFont(new java.awt.Font("Cambria", 3, 18)); // NOI18N
        jButton4.setText("Speed DOWN");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton4MousePressed(evt);
            }
        });

        up.setText("Current speed");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(jButton1)
                .addGap(67, 67, 67)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(93, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(up, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(233, 233, 233))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(482, 482, 482)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addGap(18, 18, 18)
                .addComponent(up, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MousePressed
    t.suspend();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1MousePressed

    private void jButton2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MousePressed
t.resume();         // TODO add your handling code here:
    }//GEN-LAST:event_jButton2MousePressed

    private void jButton3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MousePressed
if (k<=3)
{
m=m-500; 
int l=m/500;
 k=4-l;
String tx=k+"";
if(m==0)
{   m=100;
    tx="max speed";
}

up.setText(tx);
}// TODO add your handling code here:
    }//GEN-LAST:event_jButton3MousePressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MousePressed
if(m==100)
    m=0;
m=m+500;   
if(k>=1)
 k--;
String tx=k+"";
if(k==0)
{  m=2000; 
    tx="Slowest speed";
}
up.setText(tx);
    }//GEN-LAST:event_jButton4MousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(prims.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(prims.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(prims.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(prims.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new prims().setVisible(true);
            }
        });
    }

    public void paint(Graphics g)
    {   
        
 
        Graphics2D g2 = (Graphics2D) g;
       Font  f=new Font("TimesNewRoma",Font.BOLD,20);
        g.setFont(f);
        
        g2.setStroke(new BasicStroke(3));
        
      
        if(n==0){
            
              
             f=new Font("TimesNewRoma",Font.BOLD,30);
        g.setFont(f);
          g.drawString("PRIMS ALGORITHM", 300,80);
            
        g.setColor(Color.red);
       g.fillOval(150,200,40,40);//A
       g.fillOval(300,350,40,40);//B
       g.fillOval(400,100,40,40);//c
       g.fillOval(550,350,40,40);//D
       g.fillOval(650,175,40,40);//E
        g.setColor(Color.black);
        
        
       
                
        g.drawString("A", 163,225);
        g.drawString("B", 312,375);
        g.drawString("C", 412,125);
        g.drawString("D", 563,377);
        g.drawString("E", 663,200);
       
        
       
       g.drawLine(183,233,307,357);//AB
       g.drawLine(188,210,400,120);//AC
       g.drawLine(190,220,650,190);//AE
       g.drawLine(320,350,415,137);//BC
       g.drawLine(340,370,551,370);//BD
       g.drawLine(570,350,660,210);//DE
       g.drawLine(334,358,652,203);//BE
       g.drawLine(440,120,655,180);//CE
       
       g.drawString("10",245,295);//AB weight
       g.drawString("5", 294,160);//AC weight
       g.drawString("9", 420,200);//AE weight
       g.drawString("2", 360,280);//BC weight
       g.drawString("6", 445,365);//BD weight
       g.drawString("7", 630,280);//DE weight
       g.drawString("4", 480,280);//BE weight
       g.drawString("12", 552,150);//CE weight
      
     
        }
        
        else if (n==1)
        {
                g.setColor(Color.green);
                g.fillOval(150,200,40,40);//A
                g.setColor(Color.black);
                g.drawString("A", 163,225);
               
        }
       
        else if (n==2)
        {
            g.setColor(Color.gray);
            g.drawString("SELECTING ALL THE AVALABLE NODES ",250,450);
                 g.setColor(Color.blue);
                g.fillOval(300,350,40,40);//B
                 g.setColor(Color.black);
                g.drawString("B", 312,375);
                
        }
        
        else if (n==3)
        {
                 g.setColor(Color.blue);
               g.fillOval(400,100,40,40);//C
                 g.setColor(Color.black);
               g.drawString("C", 412,125);
                
        }
        else if (n==4)
        {
                 g.setColor(Color.blue);
               g.fillOval(650,175,40,40);//E
                 g.setColor(Color.black);
               g.drawString("E", 663,200);
                
        }
        else if (n==5)
                {
             g.setColor(Color.white);
            g.drawString("SELECTING ALL THE AVALABLE NODES ",250,450);
            g.setColor(Color.gray);
            g.drawString("CHOOSES THE MINIMUM WEIGHT NODE ",220,450);
                 g.setColor(Color.green); 
                g.drawLine(188,210,400,120);//AC
             //   g.drawString("5",415, 95);//over C
                g.setColor(Color.red);
                g.drawLine(183,233,307,357);//AB
             //   g.drawString("10",310,420);//below B 
                g.drawLine(190,220,650,190);//AE
              //  g.drawString("9",680, 175);//below E
                }
        
         else if (n==6)
                {
                  
                g.setColor(Color.black);
                g.drawLine(183,233,307,357);//AB
                  g.drawLine(188,210,400,120);//AC
                 g.drawLine(190,220,650,190);//AE
                 g.setColor(Color.white);
            //     g.drawString("10",310,420);//below B 
            //     g.drawString("9",680, 175);//below E
                }       
         else if (n==7)
                {
                   
                g.setColor(Color.green); 
                g.drawLine(188,210,400,120);//AC
           //     g.drawString("5",415, 95);//over C
                g.setColor(Color.red);
                g.drawLine(183,233,307,357);//AB
             //   g.drawString("10",310,420);//below B 
                g.drawLine(190,220,650,190);//AE
            //    g.drawString("9",680, 175);//below E
                }
        
         else if (n==8)
                {
               //     g.setColor(Color.white);
             //   g.drawOval(285, 140, 30, 30);
                g.setColor(Color.black);
                g.drawLine(183,233,307,357);//AB
       g.drawLine(188,210,400,120);//AC
       g.drawLine(190,220,650,190);//AE
                }       
        else if (n==9)
                {
                g.setColor(Color.green);
                g.drawLine(188,210,400,120);//AC
         //       g.setColor(Color.white);
         //        g.drawString("10",310,420);//below B 
          //       g.drawString("9",680, 175);//below E
                }      
        else if (n==10)
        {
            g.setColor(Color.white);
            g.drawString("CHOOSES THE MINIMUM WEIGHT NODE ",220,450);
             g.setColor(Color.gray);
            g.drawString("SELECTS NODE THE MINIMUM WEIGHT ",220,450);
            
                 g.setColor(Color.green);
               g.fillOval(400,100,40,40);//C
                 g.setColor(Color.black);
               g.drawString("C", 412,125);
                
        }
        
        else if (n==11)
        {
             g.setColor(Color.white);
            g.drawString("SELECTS NODE THE MINIMUM WEIGHT ",220,450);
            
            g.setColor(Color.gray);
            g.drawString("CHOOSES THE MINIMUM WEIGHT NODE ",220,450); 
            g.setColor(Color.green);
            g.drawLine(320,350,415,137);//BC
            g.setColor(Color.red);
            g.drawLine(440,120,655,180);//CE
            g.drawLine(183,233,307,357);//AB
        }
       else if (n==12)
        {
            g.setColor(Color.black);
            g.drawLine(320,350,415,137);//BC
           
            g.drawLine(440,120,655,180);//CE
            g.drawLine(183,233,307,357);//AB
        }
          else if (n==13)
        {
            g.setColor(Color.green);
            g.drawLine(320,350,415,137);//BC
            g.setColor(Color.red);
            g.drawLine(440,120,655,180);//CE
            g.drawLine(183,233,307,357);//AB
        }
       else if (n==14)
        {
            g.setColor(Color.black);
            g.drawLine(320,350,415,137);//BC
            
            g.drawLine(440,120,655,180);//CE
            g.drawLine(183,233,307,357);//AB
        }
    else if (n==15)
        {
            g.setColor(Color.green);
            g.drawLine(320,350,415,137);//BC
        }
    else if (n==16)
        {         g.setColor(Color.white);
            g.drawString("CHOOSES THE MINIMUM WEIGHT NODE ",220,450); 
            g.setColor(Color.gray);
            g.drawString("SELECTS NODE THE MINIMUM WEIGHT ",220,450);  
                 g.setColor(Color.green);
                g.fillOval(300,350,40,40);//B
                 g.setColor(Color.black);
                g.drawString("B", 312,375);
                
        }
    else if (n==17)
        {
            g.setColor(Color.white);
            g.drawString("SELECTS NODE THE MINIMUM WEIGHT ",220,450);  
            g.setColor(Color.gray);
            g.drawString("SELECTING ALL THE AVALABLE NODES ",250,450);
            
                 g.setColor(Color.blue);
                g.fillOval(550,350,40,40);//D
                 g.setColor(Color.black);
               g.drawString("D", 563,377);
                
        }
    else if (n==18)
        {
            g.setColor(Color.white);
            g.drawString("SELECTING ALL THE AVALABLE NODES ",250,450);
            g.setColor(Color.gray);
            g.drawString("CHOOSES THE MINIMUM WEIGHT NODE ",220,450);    
            g.setColor(Color.green);
             g.drawLine(334,358,652,203);//BE
             g.setColor(Color.red);
             g.drawLine(440,120,655,180);//CE
             g.drawLine(190,220,650,190);//AE
             g.drawLine(340,370,551,370);//BD
        }   
    
    
    else if (n==19)
        {
            g.setColor(Color.black);
             g.drawLine(334,358,652,203);//BE
             g.drawLine(440,120,655,180);//CE
             g.drawLine(190,220,650,190);//AE
             g.drawLine(340,370,551,370);//BD
        }   
    else if (n==20)
        {
            g.setColor(Color.green);
             g.drawLine(334,358,652,203);//BE
             g.setColor(Color.red);
             g.drawLine(440,120,655,180);//CE
             g.drawLine(190,220,650,190);//AE
             g.drawLine(340,370,551,370);//BD
        }   
    
    
    else if (n==21)
        {
            g.setColor(Color.black);
             g.drawLine(334,358,652,203);//BE
             g.drawLine(440,120,655,180);//CE
             g.drawLine(190,220,650,190);//AE
             g.drawLine(340,370,551,370);//BD
        }   
    
    else if (n==22)
        {
            g.setColor(Color.green);
             g.drawLine(334,358,652,203);//BE
           
        }   
    else if (n==23)
        {   
            g.setColor(Color.white);
            g.drawString("CHOOSES THE MINIMUM WEIGHT NODE ",220,450);  
            g.setColor(Color.gray);
            g.drawString("SELECTS NODE THE MINIMUM WEIGHT ",220,450);  
                 g.setColor(Color.green);
                g.fillOval(650,175,40,40);//E
                 g.setColor(Color.black);
               g.drawString("E", 663,200);
                
        }
    else if (n==24)
        {   
            g.setColor(Color.white);
            g.drawString("SELECTS NODE THE MINIMUM WEIGHT ",220,450);  
            g.setColor(Color.gray);
            g.drawString("CHOOSES THE MINIMUM WEIGHT NODE ",220,450);    
            g.setColor(Color.green);
             g.drawLine(340,370,551,370);//BD
             g.setColor(Color.red);
             g.drawLine(570,350,660,210);//DE
        }   
    else if (n==25)
        {
            g.setColor(Color.black);
             g.drawLine(340,370,551,370);//BD
             g.drawLine(570,350,660,210);//DE
        }  
     else if (n==26)
        {
            g.setColor(Color.green);
             g.drawLine(340,370,551,370);//BD
             g.setColor(Color.red);
             g.drawLine(570,350,660,210);//DE
        }   
    else if (n==27)
        {
            g.setColor(Color.black);
             g.drawLine(340,370,551,370);//BD
             g.drawLine(570,350,660,210);//DE
        } 
    else if (n==28)
        {
            g.setColor(Color.green);
             g.drawLine(340,370,551,370);//BD
 
        }   
    else if (n==29)
        {       g.setColor(Color.white);
                g.drawString("CHOOSES THE MINIMUM WEIGHT NODE ",220,450);   
                g.setColor(Color.gray);
            g.drawString("SELECTS NODE THE MINIMUM WEIGHT ",220,450);  
                 g.setColor(Color.green);
                g.fillOval(550,350,40,40);//D
                 g.setColor(Color.black);
               g.drawString("D", 563,377);
                
        }
    else if (n==30)
    {
        g.setColor(Color.white);
            g.drawString("SELECTS NODE THE MINIMUM WEIGHT ",220,450);  
            g.setColor(Color.gray);
            g.drawString("MINIMUM SPANNING TREE ",250,450);  
             f=new Font("TimesNewRoma",Font.BOLD,30);
        g.setFont(f);
         
        g.setColor(Color.white);
        g.drawLine(183,233,307,357);//AB
        g.drawLine(190,220,650,190);//AE
        g.drawLine(440,120,655,180);//CE
        g.drawLine(570,350,660,210);//DE
        g.drawString("10",245,295);//AB weight
        g.drawString("9", 420,200);//AE weight
        g.drawString("12", 552,150);//CE weight
        g.drawString("7", 630,280);//DE weight
    }
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel up;
    // End of variables declaration//GEN-END:variables
}
